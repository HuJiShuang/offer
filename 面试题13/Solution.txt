import java.util.Arrays;
public class Solution {
    public int movingCount(int threshold, int rows, int cols)
    {
        //1.判断边界条件，当k的值小于0，rows小于1，cols小于1时都不可以
        if(threshold<0 || rows<1 || cols<1)
            return 0;
        int count = 0;    //计数能够到达的格子
        boolean[] flags = new boolean[rows*cols];    //用于标记这个格子是否被计数过
        Arrays.fill(flags,false);
        count = pathCount(threshold,rows,cols,0,0,flags);
        return count;
    }
    public int pathCount(int threshold, int rows, int cols, int row, int col, boolean[] flags){
        int count = 0;
        //此处调用计算整数数位之和的函数
        if(row<rows && row>=0 && col<cols && col>=0 && digitSum(row,col)<=threshold && !flags[row*cols+col]){
            count++;
            flags[row*cols+col] = true;
            count += pathCount(threshold,rows,cols,row+1,col,flags) +
                     pathCount(threshold,rows,cols,row-1,col,flags) +
                     pathCount(threshold,rows,cols,row,col+1,flags)  +
                     pathCount(threshold,rows,cols,row,col-1,flags);
        }
        return count;
    }
    public int digitSum(int row, int col){
        int count = 0;
        while(row!=0){
            count += row%10;
            row /= 10;
        }
        while(col!=0){
            count += col%10;
            col /= 10;
        }
        return count;
    }
}